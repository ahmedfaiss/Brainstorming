* The method area and stack together is a  context of a program or it is a 
programs territory

* Stream means flow of data, like data may be flowing from program to resource or 
  resource to program
  
* Buffer is a memory object which is used to hold the data for sometime to bring
  compatibility between the devices
  
* Java provides 2 types of streams
  1. Byte Streams -> which transfers 1 byte data from input to output or vice versa
  		a. InputStream (class)-> flowing into program, base class for byte streams
  		b. OutputStyream (class) -> flowing out of the program, base class for byte streams
  		
  2. Character Streams -> which transfer 2 byte data from input to output or vice versa
  		a. Reader (class) -> for input
  		b. Writer (class) -> for output
  		
 1. InputStream -> has many methods as shown below
 	a. int read()-> reads 1 byte
 	b. int read(byte[] b) -> reads collection of bytes, depending upon the size of
 							  the array
 	c. int read(byte[], int off, int len) -> you can say from where to start storingg
 							the data in the array
 	d. int available() -> gives info on how many data is available in the resource
 	e. long skip(long n) -> if you want to skip the data between then you can use
 							this method and these words you want to skip will be
 							discarded from the resource also and it wont read also
 							
 	f. void mark(int limit), g. void reset(), h. boolean markSupported() -> these
 	   3 are inter related, because -> mark() is for marking the alphabet, so
 	   when marked the alphabet, then from that alphabet it will read but wont
 	   discard it, So when ever you want to read it again, you have just give as
 	   reset(), and it will start reading from the alphabet where it is marked
 	   So some resource wont support mark(), So we can get a clarify before hand
 	   by using markSupported();
 	   
 	i. void close()-> after using the resource you should close it
 	
 
 2. OutputStream -> has many methods as shown below
 	a. void write(int a) -> writing 1 alphabet
 	b. void write(byte[] a)-> writing the collection of bytes
 	c. void write(byte[] a, int off, int len)-> you can write from specified length
 	e. void flush()-> this will not work on all outputStream, but this will work on
 	   buffered outputStream -> when data is sent from program it will be stored on
 	   buffer to clear the buffer and go into the resource, it will force
 	f. void close()
 	   


* Parent Exception should be used at the last catch block

* If used before any sub class then it is syntax error and also -> if you check  
    logically by using the parent class(i,e Exception) then all the sub class 
    exception are present in that then below sub class exception will not be 
    executed.  Below all the sub class for exception will be written

* Object -> its the parent class for everything
* Throwable -> its the sub class of Object
* Under Throwable there are 2 things, -> 1) Exception (which we have to deal)
										 2) Error (compiler will deal with this)
										 
* Under Exception there are many sub class -> 1)ClassNotFoundException
											  2)IOException
											  3)InterruptedException
											  4)NumberFormatException
											  5)RuntimeException
  for these 5 sub classes there are again sub classes for this, will give for one
  below, and in this 5 Exceptions top 4 are are checked Exceptions and last one
  5th one is the unchecked exceptions.
											  
* Under RuntimeExecption there are Sub classes -> 1)ArithmeticException
												  2)IndexOutOfBoundsException
												  3)NullPointerException

* Checked Exception means you have to take of that its compulsory and unchecked is
  and optional either you can take care or you can leave 
* If exceptions are not controlled using try-catch block then program will crash

* class Exception has built in methods -> 1) String getMessage()
										  2) String toString()
										  3) void printStackTrace()
										  
* SOP(e.getMessage())-> it will call getMessage() method and prints it
* SOP(e) -> it will call toString() method, If you print only object e then 
  automatically toString  method will be called for every object
  
* Method printStackTrace -> it is like which method called which method till 
  the method where exception is used, For Ex: there is method2 where exception is 
  used and method1 calling mehtod2, and main method is calling method1 -> So the
  stackTrace will be like -> main is calling method1 and method1 is calling method2
  so it will give the  path like what is the sequence of method called and method1 
  and method2 are  written in some other classes
  
 * So how  to call stackTrace method -> just write it as e.printStackTrace();
 * Every user defined exceptions should inherit from Exception class and you 
   can print your own message
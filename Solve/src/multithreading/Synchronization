Synchronization means a understanding between 2 entities(might be 2 ppl,2 process
 or 2 Threads etc), there are 9 thingd we have to understand in synchronization
 
1) Resource sharing -> either it can be printers, cars, etc(if more than one Thread
                       accessing same object then that object is a shared resource
                        
2) Critical section -> suppose 2 threads are having 25 lines of code and some lines
                      of code is accessing shared object then that part of a code
                      in the thread code is called as critical section
                        
3) Mutual Exclusion -> for Ex : if there is one printer, both ppl should use printer
                       at the same time(anyways printer will not allow this even
                       though it allows then we will get different printout), So
                       we should not allow to access shared object simultaneously
                       any how we have block it, so that is called as mutual exclusion
                       there should be some co-ordination between threads
                       
So how to achieve all these three things, next points shows how to achieve it

there are 2 solution for this (first one is From point 4 to 6, and second one is
from 7 to 8)

4) Locking/mutex -> this is the first synchronization method, There will one variable
                   that is used for locking, when no thread is accessing the  shared
                   object then variable mutex = 0; So when it is zero one of the
                   Thread will access the object and will make mutex = 1(i,e locked)
                   So next thread will know that mutex is 1, so somebody is already
                   accessing it, So the second thread wait it mutex = 0;
                   but there is a limitation i,e first thread 1 will check mutex and it
                   is 0 and its time stance is finished and it goes back at the queue
                   and Thread 2 will come in the first place in the queue and it checks
                   the mutex and it is 0, So thread 2 will make mutex as 1, as soon as
                   Thread 2's time instance finishes it goes back and Thread 1 will
                   come forward, now htread 1 will not check the mutex, because it 
                   assumes that it is 0 as it checked last time and it also starts
                   accessing the shared object So 2 Threads accessing now, So in order
                   to overcome this, next point is introduces, here thread knows 
                   how to lock, read, write, inside thread itself it is present

5) Semaphore -> before OS used to take care of synchronization, it stands as a
				watch man, This was supported by the unix OS, So  OS will have
				2 methods -> wait() and signal(), So at the ATM machine there is a
				watch man(here it is OS) he says ATM machine is free now you can 
				use this and second person comes to use ATM machine, So OS says
				wait() already there is a person using it, SO when the 1st person
				finishes using he signal(), thst I am done, So the next person will
				use. It maintains separate queue that is block queue, where it it tells
				person wants to use to stand in block queue and you can use as soon as
				thread 1 finishes, and Thread 3 will be in ready queue, when thread 2 
				goes in Thread 3 will go from ready queue to block queue, Thread 4 and
				5 will be in ready queue as they dont want to use ATM machine.
				here thread is just requesting, locking, unlocking is done by OS
				
6) Monitor -> which is created when OOP and multi-threading came into existance
			  here (data resource, mutex, read() , write(), queue) are in shared
			  resource only, So entirely  it is called as object, locking and
			  unlocking are controlled by object itself, So thread just has read()
			  and write() method but it doesn't know how to read and write
			  it is done by object itself, everuything taken care by SharedObject
			  
7) Race-Condition -> old method

8) Inter-Thread communication -> actually when I access the shared object, I should
                                 know that I copied, again and again I shouldn't 
                                 copy the same thing, There should be an synchronization
                                 that I copied and I should say that I am done
                                 
                                 for Ex : there are 1 producer and 3 consumer, So
                                 producer is updating shared object and consumer should
                                 access it, but the first consumer should access it then
                                 second consumer should access it, when consumer 1 notifies
                                 then all the thread becomes ready to access so that is 
                                 called as race condition, So it should be controlled
                                 
                                 by setting up counter we can control that
                                 like when count is 0 producer should update and should change
                                 count to 1, then consumer 1 should access it and change counter
                                 to 2 and this goes on till consumer 3, after all consumer accessing
                                 the shared data then counter shouldn't go to 4, the consumer 3
                                 should change the counter to 0, So all the thread remains in blocked
                                 queue, So controlling is called as Inter-thread communication
			  

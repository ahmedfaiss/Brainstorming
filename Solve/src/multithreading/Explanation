* so under multi-programming there are 2 types -> 1) multi-user
												  2) multi-tasking

*  multi-user means multiple user using same machine simultaneously and running
   their own program simultaneously. For Ex : in olden days OS like unix or linux
   multiple user machine(keyboard, monitor) is connected to single computer(CPU,
   memory), So it is called as multi-user, now it is  outdated
   
 * multi-tasking means single user running multiple program simultaneously, under
   this there is one more category that is * multi-threading
   for Ex : in Pc we can run different application, like windows or macOS this  is
   called as multi-tasking
   
 * multi-threading means inside single application multiple things are going on
   for Ex : if we open google(its a application) so in that application we click
   on a video and simultaneously add is playing inside application and also 
   while video is  playing we can comment on that video, so three things are going
   on in single application, that is called as multi-threading(multiple threads
   inside a application) they are light weighted
   
 * If we want to achieve multi-threading then threading class should be used, even
   if we are using runnable interface then also thread class should be used
   
 * if my class is not extending any class then we can directly extend thread class
   but if my class in already extending some other class then we can inherit multiple
   class, so we can implement multiple interface(runnable interface)
   
 * note -  whenever you extend a class from Thread class and we want to multi-threading
   we must override run method -> Signature is -> public void run()
   
 * whatever logic we want in a Thread we must write it inside a run() method
 * run() is a starting point of a Thread
 * To start a thread we have to use start() method
 * The start() method intern calls the run() method 
 *Runnable interface has only one method that is -> run()
 * If a class is implementing runnable interface then it is itself not capable of
   running the method as it is just a interface but not a thread, so we have to 
   create a object of class as usual(remains same for class extending Thread) and
   in addition to that we have to  create object of Thread and you have to attach 
   that class(implemented class) to thread object as-> Thread t = new Thread(m)
   here m is the reference of implemented class
   
 * states of Thread -> 1) new -> when you create a object of Thread it will be in new State
                       2) ready -> when you write start method it is in ready state
                       3) runnning -> when start method calls run() method it will be in running state
                       		3.1) wait/notify state -> it waits for particular time and runs again, 
                       								  for Ex : if 2 thread are accessing same file then one
                       								  thread stops and 2nd Thread accesses, after 2nd
                       								  Thread finished accessing it notifies 1st Thread
                       								  that I am done you can access, So this a state in running
                       								  it is like accessing and going to 3.3 state below and coming back to notify
                       	    3.2) sleep state -> it is  like we are saying that wait for 
                       	                        some seconds and then continue, it is same
                       	                        as wait but here there is no notify thing
                       	    3.3)request IO State -> when a Thread doesn't want anybody
                       	                         else to access then it enters into this state
                       	    3.4) Terminate state -> this is automatically done
                       	    
* Priorities of Thread -> min = 1, Normal = 5, max = 10
  there is a scheduler in JVM who picks Threads to run, for Ex: There are 5 Threads
  and these 5 Threads will be in queue called as ready queue,and Threads will have
  priorities like 1, 9, 5, 7, 8 respectively then Thread should have more seconds
  of computing by CPU and next Thread can be Thread 5 because it is having second
  highest priorities or either it can like Thread 2 is finished first and next 
  Thread 5, So it depends on scheduler on how to execute
  
*A Thread will have its own stack memory space but heap is common